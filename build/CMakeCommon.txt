cmake_minimum_required(VERSION 3.2.3 FATAL_ERROR)

if(POLICY CMP0042)
	cmake_policy(SET CMP0042 NEW)
endif()
if(POLICY CMP0054)
	cmake_policy(SET CMP0054 NEW)
endif()

set(cmake_common_dir ${CMAKE_CURRENT_LIST_DIR})

macro(danssfml)
	include("${cmake_common_dir}/../deps/danssfml/CMakeInclude.txt")
endmacro()

if(NOT APPLE AND NOT WIN32 AND CMAKE_COMPILER_IS_GNUCC)
	add_compile_options(-fPIC)
endif()

if(CMAKE_SYSTEM_NAME MATCHES "Windows")
	add_compile_options(/EHsc)
endif()

include_directories("${cmake_common_dir}/../deps")
include_directories("${cmake_common_dir}/../deps/obvious/cpp")
add_definitions(-D_SCL_SECURE_NO_WARNINGS -D_CRT_SECURE_NO_WARNINGS -D_WINSOCK_DEPRECATED_NO_WARNINGS)

function(component_src output)
	#include
	include_directories(
			"../../../skeleton/src"
			"../../../skeleton/deps/dyad/src"
			"../src"
	)
	#source
	string(TOLOWER ${output} x)
	set(src ${src} "../src/${x}.cpp" PARENT_SCOPE)
	if(WIN32)
		add_definitions(-DDLAL_WINDOWS)
	elseif(APPLE)
		add_definitions(-DDLAL_OSX)
	elseif("${CMAKE_SYSTEM_NAME}" STREQUAL "Linux")
		add_definitions(-DDLAL_LINUX)
	endif()
endfunction()

function(footer output)
	if(NOT TARGET SkeletonObject)
		include_directories("${cmake_common_dir}/../skeleton/deps/dyad/src")
		add_library(SkeletonObject OBJECT
			"${cmake_common_dir}/../skeleton/src/skeleton.cpp"
			"${cmake_common_dir}/../skeleton/src/page.cpp"
			"${cmake_common_dir}/../skeleton/deps/dyad/src/dyad.c"
		)
		set_property(TARGET SkeletonObject PROPERTY CXX_STANDARD 11)
	endif()
	if(DLAL_TEST OR (ARGC GREATER 1 AND "${ARGV1}" STREQUAL "executable"))
		add_executable(${output} ${src} $<TARGET_OBJECTS:SkeletonObject>)
	else()
		add_library(${output} MODULE ${src} $<TARGET_OBJECTS:SkeletonObject>)
	endif()
	if(CMAKE_SYSTEM_NAME MATCHES "Windows")
		target_link_libraries(${output} ws2_32)
	endif()
	set_property(TARGET ${output} PROPERTY CXX_STANDARD 11)
endfunction()

function(standard_component output)
	component_src(${output})
	footer(${output})
endfunction()
