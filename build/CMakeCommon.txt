cmake_minimum_required(VERSION 3.2.3 FATAL_ERROR)
cmake_policy(SET CMP0000 OLD)
if(POLICY CMP0042)
	cmake_policy(SET CMP0042 NEW)
endif()
if(POLICY CMP0054)
	cmake_policy(SET CMP0054 NEW)
endif()

add_definitions(-D_SCL_SECURE_NO_WARNINGS -D_CRT_SECURE_NO_WARNINGS -D_WINSOCK_DEPRECATED_NO_WARNINGS)

function(component_src)
	#include
	include_directories(
			"../../../skeleton/src"
			"../../../skeleton/deps/dyad/src"
			"../src"
	)
	#source
	foreach(i ${ARGN})
		set(additional ${additional} "../../../skeleton/src/${i}.cpp")
	endforeach()
	string(TOLOWER ${output} x)
	set(
		src
			${src}
			"../src/${x}.cpp"
			"../../../skeleton/src/skeleton.cpp"
			"../../../skeleton/deps/dyad/src/dyad.c"
			${additional}
		PARENT_SCOPE
	)
	if(WIN32)
		add_definitions(-DDLAL_WINDOWS)
	elseif(APPLE)
		add_definitions(-DDLAL_OSX)
	elseif("${CMAKE_SYSTEM_NAME}" STREQUAL "Linux")
		add_definitions(-DDLAL_LINUX)
	endif()
endfunction()

function(cpp11WithExceptions)
	set_property(TARGET ${output} PROPERTY CXX_STANDARD 11)
	if(CMAKE_SYSTEM_NAME MATCHES "Windows")
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /EHsc")
	endif()
endfunction()

function(footer)
	if(DLAL_TEST)
		add_executable(${output} ${src})
	else()
		add_library(${output} MODULE ${src})
	endif()
	if(CMAKE_SYSTEM_NAME MATCHES "Windows")
		target_link_libraries(${output} ws2_32)
	endif()
	cpp11WithExceptions()
endfunction()

function(standard_component output)
	component_src(${ARGN})
	footer()
endfunction()
